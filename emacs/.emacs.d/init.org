#+TITLE:	Emacs Configuration
#+AUTHOR:	Michael Dunleavy
#+EMAIL:	michaelldunleavy@gmail.com


* Preface

This is an Org file containing my Emacs configuration. Whenever this
file is saved in Emacs it will automatically collect all of this
document's code snippets into a new ~init.el~. It does so by calling
the function =org-babel-tangle=.

The code which configures this document and calls =org-babel-tangle=
is located at the end of this document.


* Header

Warn readers of ~init.el~ not to modify ~init.el~ directly.

#+BEGIN_SRC emacs-lisp :comments no
  ;;
  ;; DO NOT MODIFY THIS FILE DIRECTLY.
  ;; This file was automatically generated from init.org using babel.
  ;; Configuration should be done through init.org.
  ;; init.org will automatically generate new versions of this file,
  ;; overwriting any changes made outside of init.org.
  ;;

#+END_SRC


* Customize

~Customize~ is Emacs' system for GUI-based configuration. I do not use
it directly but some modes automatically edit it. This code moves
Customize's state out of ~init.el~ to a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC


* Package Management

** Prerequisites

Package's are a built-in feature since Emacs 24 (although they were
available earlier).

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC


** MELPA

Add MELPA to the package archives list. Use https if possible,
elsewise warn and use http. Taken from
https://melpa.org/#/getting-started .

#+BEGIN_SRC emacs-lisp
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			  (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
	(when no-ssl
	  (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
	;; Comment/uncomment these two lines to enable/disable MELPA and
	;; MELPA Stable as desired
	(add-to-list 'package-archives
				 (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	(add-to-list 'package-archives
	             (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	(when (< emacs-major-version 24)
	  ;; For important compatibility libraries like cl-lib
	  (add-to-list 'package-archives
				   (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
#+END_SRC


** Early Package Initialization

By default packages are initialized (ie. loaded and activated) after
~init.el~ is run. Manually initializing them early makes them available
for use in ~init.el~.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC


** use-package

https://github.com/jwiegley/use-package

~use-package~ is a package configuration tool.

The following code checks that use-package is installed and downloads
it if it isn't. This is done entirely with Emacs' built-in package
management tools. All other packages should be setup with use-package
instead.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
  (eval-when-compile
	(require 'use-package))
#+END_SRC


** Try

https://github.com/larstvei/Try

~Try~ allows you to try download and use a package without permanently
saving it to your system. It lets you try packages without installing
them.

#+BEGIN_SRC emacs-lisp
  (use-package try
	:ensure t)
#+END_SRC


** which-key

https://github.com/justbur/emacs-which-key

Displays suggestions for unfinished key-bindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:config (which-key-mode))
#+END_SRC


** htmlize

https://github.com/hniksic/emacs-htmlize

Exports buffers to HTML.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
	:ensure t)
#+END_SRC


** Base16

https://github.com/chriskempson/base16
https://github.com/belak/base16-emacs

A format for color schemes with 8 achromatic shades for backgrounds
and foregrounds and 8 colorful accents for highlights. There are many
schemes available online and it's not hard to define your own.

I use the Python package ~pybase16-builder~ to manage schemes across
Emacs and multiple other applications.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
	:ensure t)
#+END_SRC


** Org Bullets

https://github.com/sabof/org-bullets

Provides pretty Unicode bullet points for Org mode headings.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC


** Onmisharp

https://github.com/OmniSharp/omnisharp-emacs

Provides C# IDE features.

#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :hook (csharp-mode . omnisharp-mode))
#+END_SRC


** org-ref

https://github.com/jkitchin/org-ref

Academic referencing tool for org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
#+END_SRC


** flycheck

https://www.flycheck.org/en/latest/

Syntax checker.

#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode t))
#+END_SRC


** Company

https://company-mode.github.io/

Auto-completion engine.

#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :hook (prog-mode . company-mode)
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1))
#+END_SRC


** expand-region

https://github.com/magnars/expand-region.el

Expand the selected region by semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-;" . 'er/expand-region)
           ("C-'" . 'er/contract-region))
    :init (unbind-key "C-'" org-mode-map))
#+END_SRC


** dired-sidebar

https://github.com/jojojames/dired-sidebar

File manager sidebar.

#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :bind (("M-\\" . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (unbind-key "M-\\")
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    (setq dired-sidebar-subtree-line-prefix "__")
    (setq dired-sidebar-theme 'vscode)
    (setq dired-sidebar-use-term-integration t))
#+END_SRC


** VsCode Icons

https://github.com/jojojames/vscode-icon-emacs
https://github.com/vscode-icons/vscode-icons

File icon set. (Useful for dired.)

#+BEGIN_SRC emacs-lisp
  (use-package vscode-icon
    :ensure t
    :commands (vscode-icon-for-file))
#+END_SRC


* User Interface

** Startup Screen

Do not open the ~About GNU Emacs~ splash screen on startup

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC


** Tool-bar & Menu-bar

The tool-bar provides pictorial icons for editing tasks like save and
undo. The menu-bar provides textual drop-down menus for a wider range
of tasks. Active modes may add menu-bar menus. Many users find both
bars obstuctive and babyish. I do however like the contextual menu-bar
entries. They are useful in unfamiliar modes.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  ;;(menu-bar-mode -1)
#+END_SRC


** Scroll-bar

Disable the graphical scrollbar. I find it unnecessary, given the
keyboard navigation options and the row information on the mode line.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC


** Column Numbers

Add column numbers next to row numbers on the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC


* Theme

[[https://github.com/chriskempson/base16][Base16]] theming auto-configured for Emacs and other applications with
[[https://github.com/InspectorMustache/base16-builder-python][base16-builder-python]]. Theme is automatically inserted between the
=base16_template= and =base16_template_end= comments by
running =pybase16 inject ...= from the shell.

#+BEGIN_SRC emacs-lisp
;; %%base16_template: emacs##default %%
;; base16-ocean-theme.el -- A base16 colorscheme

;;; Commentary:
;; Base16: (https://github.com/chriskempson/base16)

;;; Authors:
;; Scheme: Chris Kempson (http://chriskempson.com)
;; Template: Kaleb Elwert <belak@coded.io>

;;; Code:

(require 'base16-theme)

(defvar base16-ocean-colors
  '(:base00 "#2b303b"
    :base01 "#343d46"
    :base02 "#4f5b66"
    :base03 "#65737e"
    :base04 "#a7adba"
    :base05 "#c0c5ce"
    :base06 "#dfe1e8"
    :base07 "#eff1f5"
    :base08 "#bf616a"
    :base09 "#d08770"
    :base0A "#ebcb8b"
    :base0B "#a3be8c"
    :base0C "#96b5b4"
    :base0D "#8fa1b3"
    :base0E "#b48ead"
    :base0F "#ab7967")
  "All colors for Base16 Ocean are defined here.")

;; Define the theme
(deftheme base16-ocean)

;; Add all the faces to the theme
(base16-theme-define 'base16-ocean base16-ocean-colors)

;; Mark the theme as provided
(provide-theme 'base16-ocean)

(provide 'base16-ocean-theme)

;;; base16-ocean-theme.el ends here
;; %%base16_template_end%%
#+END_SRC


* Editing

** Indentation & Whitespace

*** Tabs vs Spaces

Prefer spaces for ~prog-mode~, a superclass of all programming
modes. Default to tabs otherwise.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
							  (setq indent-tabs-mode nil)))
#+END_SRC


*** Indentation Width

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC


*** Indentation Behaviour

#+BEGIN_SRC emacs-lisp
  ;; TAB only indents when point is at the start of a line
  (setq-default tab-always-indent nil)

  ;; newlines don't indent the previous line
  ;;(setq-default electric-indent-inhibit t)
#+END_SRC


*** Whitespace Deletion

#+BEGIN_SRC emacs-lisp
  ;; backspace deletes all whitespace at once
  ;; consider writing/stealing a backspace-to-tab-stop function
  (setq backward-delete-char-untabify-method 'hungry)
#+END_SRC


*** Trailing Whitespace

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC


** Pretty Symbols

~Minor mode for drawing multi-character tokens as Unicode glyphs
(e.g. lambda -> λ).~

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC


** Parentheses

Highlight pairs of matching parentheses when the point is on one of
them.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC


** Spelling

Enable spell-checking by default for text modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda () (flyspell-mode 1)))
#+END_SRC


* Auto-saves & Backups

** Auto-saves

#+BEGIN_QUOTE
	By default, Emacs automatically saves your changes to a file
	intermittently. If anything should happen, you can recover a file
	with ~M-x recover-file~.

	...

	By default, auto-save files are stored in the current directory
	with a file name on the form ~#file#~. If you don’t want to
	clutter up your file tree with Emacs' backup files, you can save
	them to a dedicated directory

	--- https://emacswiki.org/emacs/AutoSave
#+END_QUOTE

The following code sets the auto-save location to a single,
out-of-the-way directory.

#+BEGIN_SRC emacs-lisp
  (defvar mike-auto-save-location
	(expand-file-name "~/.emacs.d/auto-saves/")
	"Base directory for auto save files.")
  (setq auto-save-file-name-transforms
		`((".*" ,mike-auto-save-location t)))
#+END_SRC


** Backups

Taken from
http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save . See
link for walkthrough.

Emacs can automatically back-up old versions of files when changes are
saved.

#+BEGIN_QUOTE
	By default the backup file is made in the same directory as the
	original with a name like ~file~~. The way the backup works is
	that Emacs makes a copy of a file the first time you save it in an
	Emacs session. It only makes that one backup though, so this is
	not very useful if you keep your session running for a long time
	and want to recover an earlier version of a file.

	--- http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save
#+END_QUOTE

The following code:
- Moves autosaves to a single, out-of-the-way location
- Sets up backups after every save
- Allows multiple backups of the same file to co-exist
- Numbers backups
- Copies the first backup of each session to a separate directory
- Prevents backups of files over a certain size

These backups will pile up over time unless regularly
purged. Currently I use a cron-job to delete that are over 1 week old.

#+BEGIN_SRC emacs-lisp
  ;; custom backup location
  ;; will contain sub-directories for per-session and per-save backups
  (defvar mike-backup-location (expand-file-name "~/.emacs.d/backups/")
	"Base directory for backup files.")

  ;; set default/per-save backup location
  (setq backup-directory-alist
	`((".*" . ,(expand-file-name "per-save/" mike-backup-location))))

  (setq
   backup-by-copying t        ; don't clobber symlinks
   kept-new-versions 1000     ; keep n latest versions
   kept-old-versions 0        ; don't bother with old versions
   delete-old-versions t      ; don't ask about deleting old versions
   version-control t          ; number backups
   vc-make-backup-files t)    ; backup version controlled files

  (defvar mike-backup-file-size-limit (* 5 1024 1024)
	"Maximum size of a file (in bytes) that should be copied at each savepoint.")

  (defun mike-backup-every-save ()
	"Backup files every time they are saved, as well as at the start of each session"

	;; when at start of session
	(when (not buffer-backed-up)
	  ;; settings for per-session backup
	  (let ((backup-directory-alist
			 `((".*" . ,(expand-file-name "per-session/" mike-backup-location))))
			(kept-new-versions 1000))

		;; make a per-session backup
		(if (<= (buffer-size) mike-backup-file-size-limit)
			(progn
			  (message "Made per-session backup of %s" (buffer-name))
			  (backup-buffer))
		  (warn
		   "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		   (buffer-name)))))

	;; always
	(let ((buffer-backed-up nil))
	  (if (<= (buffer-size) mike-backup-file-size-limit)
		  (progn
			(message "Made per-save backup of %s" (buffer-name))
			(backup-buffer))
		(warn
		 "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		 (buffer-name)))))

  (add-hook 'before-save-hook 'mike-backup-every-save)
#+END_SRC


* Misc

** Symbolic Links

Disable warning about following symbolic links to version controlled
directories.

#+BEGIN_SRC emacs-lisp
  ;; honestly, I don't know the full implications of this one
  ;; I just want the yes/no prompt gone
  (setq vc-follow-symlinks nil)
#+END_SRC


* Org

** Indentation

Indent text according to outline structure. (Calls =org-indent-mode=.)

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC


** Emphasis

Hide emphasis marker characters (such as '/'s for italics).

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC


* init.org

** Org-mode Properties

*** Tangling

Mark all source blocks for compilation.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args  :tangle yes
#+END_SRC
#+PROPERTY: header-args  :tangle yes


*** Comments

Put comments in output file to denote sections.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args+ :comments yes
#+END_SRC
#+PROPERTY: header-args+ :comments yes


*** Results

Prevent evaluation results from being appended to ~init.org~.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args+ :results silent
#+END_SRC
#+PROPERTY: header-args+ :results silent


** Emacs File Local Variables

Compile ~init.el~ whenever ~init.org~ is saved in Emacs.

~The start of the local variables list should be no more than 3000
characters from the end of the file...~ I had a very unpleasant time
figururing that out.

#+BEGIN_SRC org :tangle no
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
  # End:
#+END_SRC

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
