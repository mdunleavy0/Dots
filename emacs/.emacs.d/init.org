#+title:	Emacs Configuration
#+author:	Michael Dunleavy


* Preface

This is an Org file containing my Emacs configuration. Whenever this file is
saved in Emacs it will automatically collect all of this document's code
snippets into a new =init.el=. It does so this calling function ~org-babel-tangle~.

The code which configures this document and calls ~org-babel-tangle~ is located at
the end of this document.


* Header

Warn readers of =init.el= not to modify =init.el= directly.

#+begin_src emacs-lisp :comments no
  ;;
  ;; DO NOT MODIFY THIS FILE DIRECTLY.
  ;; This file was automatically generated from init.org using babel.
  ;; Configuration should be done through init.org.
  ;; init.org will automatically generate new versions of this file,
  ;; overwriting any changes made outside of init.org.
  ;;

#+end_src


* Customize

~Customize~ is Emacs' system for GUI-based configuration. I do not use it directly
but some modes automatically edit it. This code moves Customize's state out of
=init.el= to a separate file.

#+begin_src emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (if (file-exists-p custom-file)
        (load custom-file t)
      (write-region "" nil custom-file))
#+end_src


* Garbage Collection

Change the allocation threshold before garbage collection occurs. The default is
quite low compared to modern desktop RAM amounts. One suggestion is to set the
threshold extra high during startup to speed up initialisation and then bring it
down. However, when I profiled startup there was no improvement after 20 MB. I
think the remaining garbage collections were triggered by heap allocations. The
related variable ~gc-cons-percentage~ had no effect on startup time.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 20 1000 1000)) ; 20 MB (default 0.8 MB)
#+end_src

Here's some profiling code. ~use-package-verbose~ echoes messages when each
package managed by [[*Use-package]] loads, which is handy for identifying packages
that need deferring. The rest is a snippet that prints startup time and the
number of garbage collections it took. I've also tried out [[https://github.com/jschaf/esup][ESUP]] (the Emacs
Start-Up Profiler), which may be of use.

#+begin_src emacs-lisp
  ;; (setq use-package-verbose t)

  ;; ;; Taken from
  ;; ;; https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Scratch-12.org
  ;; (defun efs/display-startup-time ()
  ;;   (message "Emacs loaded in %s with %d garbage collections."
  ;;            (format "%.2f seconds"
  ;;                    (float-time
  ;;                     (time-subtract after-init-time before-init-time)))
  ;;            gcs-done))
  ;; (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src


* User Interface

** Startup Screen

Do not open the =About GNU Emacs= splash screen on startup.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src


** Terminal Mouse

Enable mouse when running Emacs from xterm compatible terminal emulators.

#+begin_src emacs-lisp
  (xterm-mouse-mode 1)
#+end_src


** Tool-bar & Menu-bar

The tool-bar provides pictorial icons for editing tasks like save and undo. The
menu-bar provides textual drop-down menus for a wider range of tasks. Active
modes may add menu-bar menus. Both bars can be considered obtrusive. However,
the contextual menu-bar entries are useful in unfamiliar modes.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (if (not window-system)
      (menu-bar-mode -1))
#+end_src


** Scroll-bar

Disable the graphical scrollbar. I find it unnecessary, given the keyboard
navigation options and the row information on the mode line.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src


** Column Numbers

Add column numbers next to row numbers on the mode line.

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src


** Frame Size

By default, Emacs automatically shrinks the frame so to align with row and
column boundaries (or at least it does on KDE). This looks bad when you maximise
a frame/window and there's a sliver of desktop visible. The following code
disables this behaviour.

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

Additionally, for KDE systems, perform the following steps from
https://www.emacswiki.org/emacs/KdeMaximized:

#+begin_quote
    1. Right click on the Emacs image in the title bar.
    2. More Actions > Special Window Settings…
    3. Click on the Size & Position tab
    4. Select the checkbox for ‘Obey geometry restrictions’
    5. Choose ‘Force’ in the dropdown menu
    6. Select ‘No’ from the radio buttons to its right
    7. Click the ‘OK’ button at the bottom to save your settings.
#+end_quote


** Yes or No Prompts

Replace yes/no prompts with y/n prompts.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src


* Editing

** Delete Selection

Let typed text delete and replace any selected text. This is the default
behaviour in any other software with text editing.

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src


** Fill Column

Preferred line width for commands like ~fill-paragraph~.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src


** Indentation & Whitespace

*** Tabs vs Spaces

Prefer spaces for ~prog-mode~, a superclass of all programming modes. Default to
tabs otherwise.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
			(lambda () (setq indent-tabs-mode nil)))
#+end_src

As an exception, use tabs in ~makefile-mode~. (Makefiles require tabs.)

#+begin_src emacs-lisp
  (add-hook 'makefile-mode-hook
            (lambda () (setq indent-tabs-mode t)))
#+end_src


*** Indentation Width

#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src


*** Indentation Behaviour

#+begin_src emacs-lisp
  ;; TAB only indents when point is at the start of a line
  (setq-default tab-always-indent nil)

  ;; newlines don't indent the previous line
  (setq-default electric-indent-inhibit t)
#+end_src


*** Whitespace Deletion

#+begin_src emacs-lisp
  ;; backspace deletes all whitespace at once
  ;; consider writing/stealing a backspace-to-tab-stop function
  (setq backward-delete-char-untabify-method 'hungry)
#+end_src


*** Trailing Whitespace

Highlight trailing whitespace. (Even invisible things can bother me.)  Trailing
whitespace can be purged with ~delete-trailing-whitespace~.

#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
#+end_src


*** CC Mode

~cc-mode~ is a parent mode for C-like languages including C, Java & AWK. It
provides settings for indenting and formatting source code in its child
modes. Preset styles are available with ~c-set-style~.

#+begin_src emacs-lisp
  (setq c-default-style "stroustrup")
#+end_src


** Pretty Symbols

Minor mode for drawing multi-character tokens as Unicode glyphs
(e.g. lambda -> λ).

#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
#+end_src


** Parentheses

Highlight pairs of matching parentheses when the point is on one of them.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src


** Spelling

Enable spell-checking by default for text modes. Requires a compatible
spell-checker to be installed on the operating system.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src


* Auto-saves & Backups

** Auto-saves

#+begin_quote
	By default, Emacs automatically saves your changes to a file
	intermittently. If anything should happen, you can recover a file with
    ~M-x recover-file~.

	...

	By default, auto-save files are stored in the current directory with a file
	name on the form ~#file#~. If you don’t want to clutter up your file tree with
	Emacs' backup files, you can save them to a dedicated directory

	--- https://emacswiki.org/emacs/AutoSave
#+end_quote

The following code sets the auto-save location to a single, out-of-the-way
directory.

#+begin_src emacs-lisp
  (defvar mike-auto-save-location
	(expand-file-name "~/.emacs.d/auto-saves/")
	"Base directory for auto save files.")
  (setq auto-save-file-name-transforms
		`((".*" ,mike-auto-save-location t)))
#+end_src


** Backups

Taken from http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save . See
link for walkthrough.

Emacs can automatically back-up old versions of files when changes are saved.

#+begin_quote
	By default the backup file is made in the same directory as the original
	with a name like =file~=. The way the backup works is that Emacs makes a
	copy of a file the first time you save it in an Emacs session. It only makes
	that one backup though, so this is not very useful if you keep your session
	running for a long time and want to recover an earlier version of a file.

	--- http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save
#+END_QUOTE

The following code:
- Moves autosaves to a single, out-of-the-way location
- Sets up backups after every save
- Allows multiple backups of the same file to co-exist
- Numbers backups
- Copies the first backup of each session to a separate directory
- Prevents backups of files over a certain size

These backups will pile up over time unless regularly purged. Currently I use a
cron-job to delete backups over 1 week old.

#+begin_src emacs-lisp
  ;; custom backup location
  ;; will contain sub-directories for per-session and per-save backups
  (defvar mike-backup-location (expand-file-name "~/.emacs.d/backups/")
	"Base directory for backup files.")

  ;; set default/per-save backup location
  (setq backup-directory-alist
	`((".*" . ,(expand-file-name "per-save/" mike-backup-location))))

  (setq
   backup-by-copying t        ; don't clobber symlinks
   kept-new-versions 1000     ; keep n latest versions
   kept-old-versions 0        ; don't bother with old versions
   delete-old-versions t      ; don't ask about deleting old versions
   version-control t          ; number backups
   vc-make-backup-files t)    ; backup version controlled files

  (defvar mike-backup-file-size-limit (* 5 1024 1024)
	"Maximum size of a file (in bytes) that should be copied at each savepoint.")

  (defun mike-backup-every-save ()
	"Backup files every time they are saved, as well as at the start of each session"

	;; when at start of session
	(when (not buffer-backed-up)
	  ;; settings for per-session backup
	  (let ((backup-directory-alist
			 `((".*" . ,(expand-file-name "per-session/" mike-backup-location))))
			(kept-new-versions 1000))

		;; make a per-session backup
		(if (<= (buffer-size) mike-backup-file-size-limit)
			(progn
			  (message "Made per-session backup of %s" (buffer-name))
			  (backup-buffer))
		  (warn
		   "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		   (buffer-name)))))

	;; always
	(let ((buffer-backed-up nil))
	  (if (<= (buffer-size) mike-backup-file-size-limit)
		  (progn
			(message "Made per-save backup of %s" (buffer-name))
			(backup-buffer))
		(warn
		 "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		 (buffer-name)))))

  (add-hook 'before-save-hook 'mike-backup-every-save)
#+end_src


* Org

** Emphasis

Hide emphasis marker characters (such as '/'s for italics).

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src


** Indentation

Indent text according to outline structure. (Calls ~org-indent-mode~.)

#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src


** Structure Templates

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-structure-template-alist '("S" . "src emacs-lisp"))
    ;; resort list
    (let* ((ls org-structure-template-alist)
           (ls (sort ls (lambda (a b)
                          (string> (car a) (car b)))))
           (ls (sort ls (lambda (a b)
                          (string< (downcase (car a)) (downcase (car b)))))))
      (setq org-structure-template-alist ls)))
#+end_src


** Title Sizes

Enlarge the fonts on heading lines. Taken from
https://sophiebos.io/posts/prettifying-emacs-org-mode/.

#+begin_src emacs-lisp
  (with-eval-after-load 'org

    ; set size of document title and other fields
    (set-face-attribute 'org-document-title nil :weight 'bold :height 1.7)
    (set-face-attribute 'org-document-info nil :weight 'bold :height 1.2)

    ; set heading sizes
    (dolist (face '((org-level-1 . 1.35)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'bold :height (cdr face))))
#+end_src


* Miscellaneous

** Dired

Emacs' fire manager. Set =ls= flags used to format entries and highlight the
current line.

#+begin_src emacs-lisp
  (setq dired-listing-switches "-AFGhl")
  (add-hook 'dired-mode-hook #'hl-line-mode)
#+end_src


** History

Enable minibuffer history. Used by [[*Vertico]].

#+begin_src emacs-lisp
  (savehist-mode 1)
#+end_src


** Package List

Highlight the current line when visiting the package list.

#+begin_src emacs-lisp
  (add-hook 'package-menu-mode-hook #'hl-line-mode)
#+end_src


** Shell Script

*** Default Shell

Set the default shell for =sh-mode= to the plain Bourne shell. Emacs' stock
behaviour is to set it to ~$SHELL~ or an equivalent. I prefer to use =zsh= as my
interactive shell but script in either =sh= or =bash= for portability.

#+begin_src emacs-lisp
  (setq sh-shell-file "/bin/sh")
#+end_src


** Symbolic Links

Disable warning about following symbolic links to version controlled
directories. (Of particular interest to me, don't follow this file to my
dotfiles directory.)

#+begin_src emacs-lisp
  ;; honestly, I don't know the full implications of this one
  ;; I just want the yes/no prompt gone
  (setq vc-follow-symlinks nil)
#+end_src


* External Packages

** Prerequisites

Packages are a built-in feature since Emacs 24 (although they were available
earlier).

#+begin_src emacs-lisp
  (require 'package)
#+end_src


** MELPA

https://melpa.org/

Add MELPA to the package archives list. Require https. Taken from
https://melpa.org/#/getting-started.

#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; Comment/uncomment this line to enable MELPA Stable if desired.
  ;; See `package-archive-priorities` and `package-pinned-packages`.
  ;; Most users will not need or want to do this.
  ;;(add-to-list 'package-archives
  ;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

I have moved back to regular Melpa from Melpa Stable. Melpa Stable is a
lie. I've known this for some time. The sole criterion for a commit ending up in
Melpa Stable is whether it has been tagged with release number. Stability and
Zero-Day are equivalent as far as Melpa is concerned. Here's Gentoo's protocols
for package stabilisation for comparison:
[[https://wiki.gentoo.org/wiki/Stable_request]]. Regular Melpa is just as
unsupervised but at least it has the latest toys.


** Early Package Initialisation

By default packages are initialised (ie. loaded and activated) after =init.el= is
run. Manually initialising them early makes them available for use in =init.el=.

#+begin_src emacs-lisp
  (package-initialize)
#+end_src


** Use-package

https://github.com/jwiegley/use-package

=use-package= is a package configuration tool.

The following code checks that use-package is installed and downloads it if it
isn't. This is done entirely with Emacs' built-in package management tools. All
other packages should be setup with use-package instead.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+end_src

=Ensured= packages are installed by default. An ensured package will be downloaded
from the package archives if it is not already present.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


** AUCTeX

https://www.gnu.org/software/auctex/

Enhanced TeX mode. Using PDF Tools for viewing PDFs inside Emacs.

#+begin_src emacs-lisp
  (use-package tex
    :pin gnu
    :ensure auctex
    :defer t
    :after pdf-tools
    :custom (TeX-view-program-selection '((output-pdf "PDF Tools"))))
#+end_src


** Base16

https://github.com/chriskempson/base16
https://github.com/tinted-theming/home
https://github.com/tinted-theming/base16-emacs/tree/main

Base16 theme for Emacs. Base16 is a framework for defining colour themes across
multiple applications. It uses a palette 16 colours. The =base16-custom= theme is
generated using [[https://github.com/misterio77/flavours][Flavours]].

#+begin_src emacs-lisp
  (use-package base16-theme
    :custom
    (base16-theme-256-color-source 'colors)
    :config
    ;; load the theme named in Flavours' 'lastscheme' file
    (let* ((path "~/.local/share/flavours/lastscheme")
           (theme-name (concat "base16-" (with-temp-buffer
                                           (insert-file-contents path)
                                           (buffer-string)))))
      (load-theme (intern theme-name) t)))
#+end_src


** Consult

https://github.com/minad/consult

=Consult= provides a variety of minibuffer completion menus with previews in the
main buffer. Most notable is ~consult-buffer~, a ~C-x b~ replacement. Almost all of
the keybindings are taken from the Consult readme and are upgraded versions of
built-in commands and bindings. Included in the ~:config~ section is code to
provide file previews in ~find-file~.

#+begin_src emacs-lisp
  (use-package consult
    :bind
    ("C-x b" . consult-buffer)
    ("C-x 4 b" . consult-buffer-other-window)
    ("C-x 5 b" . consult-buffer-other-frame)
    ("C-x t b" . consult-buffer-other-tab)
    ("C-x r b" . consult-bookmark)
    ("C-x p b" . consult-project-buffer)
    ("C-c m" . consult-man)
    ("C-c i" . consult-info)
    ("M-y" . consult-yank-from-kill-ring)
    ("M-g g" . consult-goto-line)
    ("M-g M-g" . consult-goto-line)
    ("M-g o" . consult-outline)

    :config
    ;; From https://github.com/minad/consult/wiki#previewing-files-in-find-file
    (setq read-file-name-function #'consult-find-file-with-preview)
    (defun consult-find-file-with-preview (prompt &optional dir default mustmatch initial pred)
      (interactive)
      (let ((default-directory (or dir default-directory))
            (minibuffer-completing-file-name t))
        (consult--read #'read-file-name-internal :state (consult--file-preview)
                       :prompt prompt
                       :initial initial
                       :require-match mustmatch
                       :predicate pred))))
#+end_src


** Corfu

https://github.com/minad/corfu

Modular at-point completion system. I had used =Company= in the past instead. The
=popupinfo= extension adds documentation popups after a delay.

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t "Enable autocomplete")
    (corfu-auto-delay 0.1 "Delay before autocompleting")
    (corfu-popupinfo-delay '(1.6 . 0.8) "Delays before documentation popups")
    :config
    (global-corfu-mode 1)
    (corfu-popupinfo-mode 1))
#+end_src



** CRUX

https://github.com/bbatsov/crux

B. Batsov's /Collection of Ridiculous Useful eXtensions/ is a set small elisp
functions to improve editting. The package comes with no default
keybindings. That way if you aren't interested in a command, you can easily
ignore it.

#+begin_src emacs-lisp
  (use-package crux
    :bind (([remap move-beginning-of-line] . crux-move-beginning-of-line)
           ("C-c c" . crux-duplicate-current-line-or-region)
           ("C-c C" . crux-duplicate-and-comment-current-line-or-region)
           ("C-c D" . crux-delete-file-and-buffer)
           ("C-c R" . crux-rename-file-and-buffer)
           ("C-c s" . crux-sudo-edit)))
#+end_src


** DiredFL

https://github.com/purcell/diredfl

Colourise [[*Dired]]. Uses ~'dired-after-reading-hook~ instead of calling
~diredfl-global-mode~ to make icons visible in [[*Consult]] previews.

#+begin_src emacs-lisp
  (use-package diredfl
    :hook
    (dired-after-readin . diredfl-mode)
    :config
    ;; change default file name colour to the default text colour
    (set-face-foreground 'diredfl-file-name (face-foreground 'default)))
#+end_src


** Eglot

https://joaotavora.github.io/eglot/

LSP (Language Server Protocol) client. Built-in to Emacs 29 and beyond.

Requires language servers to be installed on the system. I use the following
language servers:

| Language | Server   |
|----------+----------|
| C/C++    | [[https://clangd.llvm.org/][clangd]]   |
| LaTeX    | [[https://github.com/astoff/digestif][Digestif]] |

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((c-mode c++-mode TeX-mode tex-mode) . eglot-ensure)
    :custom
    (eglot-ignored-server-capabilities '(:documentOnTypeFormattingProvider)))
#+end_src


** Expand Region

https://github.com/magnars/expand-region.el

Expand the marked region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src


** GLSL

https://github.com/jimhourihan/glsl-mode

Major mode for the OpenGL Shading Language.

#+begin_src emacs-lisp
  (use-package glsl-mode
    :defer t)
#+end_src


** Indent Bars

https://github.com/jdtsmith/indent-bars

Provides indentation guide bars.

#+begin_src emacs-lisp
  (use-package indent-bars
    :pin gnu
    :custom
    (indent-bars-highlight-current-depth '(:pattern "." :blend 0.5))
    :hook
    sgml-mode
    nxml-mode)
#+end_src


** Marginalia

https://github.com/minad/marginalia

Provides descriptions next to completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :config (marginalia-mode))
#+end_src


** Markdown

https://jblevins.org/projects/markdown-mode/

Major mode for editing markdown. Used by =Eglot= and =ElDoc= to format
documentation.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :pin nongnu)
#+end_src


** Multiple Cursors

https://github.com/magnars/multiple-cursors.el

Multiple cursors package with both keyboard and mouse functionality.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :pin nongnu
    :init (unbind-key "C-<down-mouse-1>") ; mouse-buffer-menu
    :bind (("C-c m" . 'mc/edit-lines)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C->" . 'mc/mark-all-like-this)
           ("C-<mouse-1>" . 'mc/add-cursor-on-click)))
#+end_src


** Mustache

https://github.com/mustache/emacs

Major mode for the Mustache templating format. Used by [[*Base16]].

#+begin_src emacs-lisp
  (use-package mustache-mode
    :defer t)
#+end_src


** Nerd Icons

https://www.nerdfonts.com

Packages that add icons to the user-interface from the =Nerd Fonts= icon font
collection. As configured, this requires one of the Nerd Fonts to be installed
separately. Alternatively, the package =nerd-icons= includes the command
~nerd-icons-install-fonts~.

*** Nerd Icons Completion

https://github.com/rainstormstudio/nerd-icons-completion

Icons for minibuffer completion. Integrates with [[*Vertico]] and [[*Marginalia]].

#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after marginalia
    :if window-system
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src


*** Nerd Icons Corfu

https://github.com/LuigiPiucco/nerd-icons-corfu

Icons for [[*Corfu]] completions.

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :after corfu
    :if window-system
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src


*** Nerd Icons Dired

https://github.com/rainstormstudio/nerd-icons-dired

Icons for [[*Dired]]. Uses ~'dired-after-reading-hook~ instead of ~'dired-mode-hook~ to
make icons visible in [[*Consult]] previews.

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :if window-system
    :hook
    (dired-after-readin . nerd-icons-dired-mode))
#+end_src


** Org

*** TODO Org-appear

https://github.com/awth13/org-appear

Reverts elements of org formatting to plain text when the point is over
them. Requires Emacs 29.1 at time of writing.

#+begin_src emacs-lisp :tangle no
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode)
    :custom
    (org-appear-autoemphasis t "Revert emphasis markers")
    (org-appear-autolinks t "Revert links")
    (org-appear-autosubmarkers t "Revert subscripts and superscripts")
    (org-appear-autoentities t "Revert TeX-like special symbols")
    (org-appear-autokeywords t "Revert document info keywords")
    (org-appear-inside-latex t "Revert LaTeX"))
#+end_src


*** Org-superstar

https://github.com/integral-dw/org-superstar-mode

Provides prettified bullets to headings and lists in =org-mode=. A successor to [[https://github.com/integral-dw/org-bullets][Org-bullets]].

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
    (org-superstar-cycle-headline-bullets nil))
#+end_src


** PDF Tools

https://github.com/vedang/pdf-tools

Enhanced PDF viewer. This package takes ~0.5 s to load but I can't figure out a
way to defer it until before [[*AUCTeX]] is loaded.

#+begin_src emacs-lisp

  (use-package pdf-tools
    :defer 3
    :if window-system
    :config (pdf-loader-install))
#+end_src


** Try

https://github.com/larstvei/Try

=Try= allows you to try download and use a package without permanently saving it
to your system. In other words it lets you try a package out before installing.

#+begin_src emacs-lisp
  (use-package try
    :commands try)
#+end_src


** Vertico

https://github.com/minad/vertico

Modular vertical minibuffer completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :config (vertico-mode))
#+end_src


** Which-key

https://github.com/justbur/emacs-which-key

Displays suggestions for unfinished key-bindings. Will be built-in to Emacs 30
and beyond.

#+begin_src emacs-lisp
  (use-package which-key
    :custom (which-key-lighter "" "Remove indicator from mode-line")
    :config (which-key-mode))
#+end_src


** YAML

https://github.com/yoshiki/yaml-mode

Major mode for YAML data/config files.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :pin nongnu
    :defer t)
#+end_src


* Key Bindings

** Bind-key

[[Use-package]] includes a package called =bind-key= to improve the keybinding
process.

It's syntax is slightly simpler. For example...
~(global-set-key (kbd "C-c n") 'global-display-line-numbers-mode)~
becomes...
~(bind-key "C-c n" 'global-display-line-numbers-mode)~

Keys bound with ~key-bind*~ cannot be overwritten by mode-specific keybindings.

And finally, ~describe-personal-keybindings~ lists all keybindings made with
=bind-key='s functions. This allows the user to keep track of all changes made to
Emacs' default keybindings.

#+begin_src emacs-lisp
  (require 'bind-key)
#+end_src


** Build

Build the program including the current buffer.

#+begin_src emacs-lisp
  (bind-key "C-c b" 'compixle)
  (bind-key "C-c B" 'kill-compilation)
#+end_src


** Cleanup Whitespace

Clean up a variety of whitespace problems.

#+begin_src emacs-lisp
  (bind-key "C-c W" 'whitespace-cleanup)
#+end_src


** Diff

Diff buffer with its associated file, showing unsaved changes.

#+begin_src emacs-lisp
  (bind-key "C-c d" 'diff-buffer-with-file)
#+end_src


** Highlight Line

Toggle active line highlighting.

#+begin_src emacs-lisp
  (bind-key "C-c h" 'global-hl-line-mode)
#+end_src


** Indent Bars
#+begin_src emacs-lisp
  (bind-key "C-c i" 'indent-bars-mode)
#+end_src


** Line Numbers

Toggle line numbers.

#+begin_src emacs-lisp
  (bind-key "C-c n" 'global-display-line-numbers-mode)
#+end_src


** Revert Buffer

Borrowing from the Common User Access (CUA) conventions, bind =<f5>= to Emacs'
equivalent of a /refresh/ command.

#+begin_src emacs-lisp
  (bind-key "<f5>" 'revert-buffer)
  (bind-key "M-<f5>" 'auto-revert-mode)
#+end_src


** Set Variable

Interactively set a *customisable* variable. See [[info:emacs#Examining][manual]] for more info.

#+begin_src emacs-lisp
  (bind-key "C-c v" 'set-variable)
#+end_src


** Suspend

By default =C-z= is bound to ~suspend-frame~. This emulates the Unix shell behaviour
of =C-z= issuing a =SIGTSTP= signal. This can be an annoying behaviour for GUI
applications, where the concept of a background job isn't applicable.

#+begin_src emacs-lisp
  (unbind-key "C-z")
#+end_src


** Whitespace Mode

Toggle whitespace indicators.

#+begin_src emacs-lisp
  (bind-key "C-c w" 'whitespace-mode)
#+end_src


* init.org

** Org-mode Properties

*** Tangling

Mark all source blocks for compilation.

#+begin_src org :tangle no
  ,#+property: header-args  :tangle yes
#+end_src
#+property: header-args  :tangle yes


*** Comments

Put comments in output file to denote sections.

#+begin_src org :tangle no
  ,#+property: header-args+ :comments yes
#+end_src
#+property: header-args+ :comments yes


*** Results

Prevent evaluation results from being appended to =init.org=.

#+begin_src org :tangle no
  ,#+property: header-args+ :results silent
#+end_src
#+property: header-args+ :results silent


** Folding

Since this is a large Org file, open it with the headings folded for faster
navigation.

#+begin_src emacs-lisp :tangle no
  ,#+startup: fold
#+end_src
#+startup: fold


** Emacs File Local Variables

Compile =init.el= whenever =init.org= is saved in Emacs.

_The start of the local variables list should be no more than 3000 characters
from the end of the file..._ I had a very unpleasant time figuring that out.

#+begin_src org :tangle no
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
  # End:
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
