#+TITLE:    Emacs Config
#+AUTHOR:   Michael Dunleavy
#+EMAIL:    mike@dunleavy.ie

#+PROPERTY: header-args :tangle yes :comments yes :results silent


* Header

Warn readers of ~init.el~ not to modify ~init.el~ directly.

#+BEGIN_SRC emacs-lisp :comments no
  ;;
  ;; DO NOT MODIFY THIS FILE DIRECTLY.
  ;;
  ;; This file was automatically generated from init.org using babel.
  ;; Configuration should be done through init.org. Call org-babel-tangle from
  ;; init.org to generate new versions of this file.
  ;;

#+END_SRC


* Customize

=Customize= is Emacs' system for GUI-based configuration. I do not use it
directly but some modes automatically edit it. This code moves Customize's state
out of ~init.el~ to a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))
#+END_SRC


* Elisp

** Indentify

#+BEGIN_SRC emacs-lisp
  (defun mike-indentify (start end &optional _arg)
    "If `indent-tabs-mode', call `tabify', else call `untabify'.
  Arguments START, END and _ARG behave analogously to their
  `tabify'/`untabify' counterparts."
    (interactive (if current-prefix-arg
                     (list (point-min) (point-max) current-prefix-arg)
                   (list (region-beginning) (region-end) nil)))
    (if indent-tabs-mode
        (tabify start end _arg)
      (untabify start end _arg)))
#+END_SRC


** Set Indentation

#+BEGIN_SRC emacs-lisp
  (defun mike-set-indentation (&optional arg)
    "Modify `indent-tabs-mode' and optionally `tab-width'.
  Combines functionality of toggling `indent-tabs-mode' (i.e. tabs
  v. spaces), setting `indent-tabs-mode' and setting `tab-width';
  depending on the prefix argument, ARG.

  Calling this function without a prefix argument simply toggles
  `indent-tabs-mode', as this is the the most common use-case.

  ARG values of 0 and `-' set `indent-tabs-mode' to spaces and tabs
  respectively.
  \\[universal-argument] 0 \\[mike-set-indentation] sets `indent-tabs-mode' to nil (spaces).
  \\[universal-argument] - \\[mike-set-indentation] sets `indent-tabs-mode' to t (tabs).

  Positive values of ARG set `indent-tabs-mode' to spaces and set
  `tab-width' to ARG characters.
  \\[universal-argument] 2 \\[mike-set-indentation] sets indentation to 2 spaces.

  Negative values of ARG set `indent-tabs-mode' to tabs and set
  `tab-width' to (abs ARG) characters.
  \\[universal-argument] -3 \\[mike-set-indentation] sets indentation to a tab of width 3."
    (interactive "p")
    (cond ((null current-prefix-arg) (setq indent-tabs-mode (not indent-tabs-mode)))
          ((eq current-prefix-arg '-) (setq indent-tabs-mode t))
          ((= arg 0) (setq indent-tabs-mode nil))
          (t (setq indent-tabs-mode (< arg 0)
                   tab-width (abs arg))))
    (message "Set indentation: %s (width %s)"
             (if indent-tabs-mode "tabs" "spaces")
             tab-width))
#+END_SRC


** Smarter C-a

Taken from B. Batsov's [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Emacs Redux]] blog. Featured in [[https://github.com/bbatsov/prelude][Prelude]].

Combine the functionality of ~back-to-indentation~ and ~move-beginning-of-line~ into
one togglable command.

Replicates the seldom-useful argument of ~move-beginning-of-line~.

#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))
#+END_SRC


* User Interface

** Column Numbers

Add the column number next to row number on the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC


** Scroll-bar

Disable the graphical scrollbar. I find it unnecessary, given the keyboard
navigation options and the row information on the mode line.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC


** Splash Screen

Disable the 'Welcome to GNU Emacs' startup screen.

I'd been putting off disabling this until I found a good alternative splash
screen; but frankly I don't even know what I want in a splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC


** Terminal Mouse

Enable mouse when running Emacs from xterm compatible terminal emulators.

#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC


** Tool-bar & Menu-bar

The tool-bar provides pictorial icons for editing tasks like save and undo. The
menu-bar provides textual drop-down menus for a wider range of tasks. Active
modes may add menu-bar menus. Both bars can be considered obtrusive. However,
the contextual menu-bar entries are useful in unfamiliar modes.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  ;;(menu-bar-mode -1)
#+END_SRC


* Editing

** Indentation & Whitespace

*** Tabs vs Spaces

Prefer spaces for =prog-mode=, a parent mode of all programming modes. Default to
tabs otherwise.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+END_SRC

As an exception, use tabs in =makefile-mode=. (Makefiles require tabs.)

#+BEGIN_SRC emacs-lisp
  (add-hook 'makefile-mode-hook
            (lambda () (setq indent-tabs-mode t)))
#+END_SRC


*** Indentation Width

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC


*** Trailing Whitespace

Highlight trailing whitespace. (Even invisible things can bother me.)

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC


*** CC Mode

=cc-mode= is a parent mode for C-like languages including C, Java & AWK. It
provides settings for indenting and formatting source code in its child
modes. Preset styles are available with ~c-set-style~.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "stroustrup")
#+END_SRC


** Fill Column

Prefrerred line width for commands like ~fill-paragraph~.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC


** Pretty Symbols

Minor mode for drawing multi-character tokens as Unicode glyphs (e.g. lambda ->
λ).

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC


** Parentheses

Highlight pairs of matching parentheses when the point is on one of them.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC


** Spelling

Enable spell-checking by default for text modes. Requires a compatible
spell-checker to be installed on the operating system.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda () (flyspell-mode 1)))
#+END_SRC


* Style

** Font

There are several ways to configure the default font. This approach is taken
from the [[info:emacs#Fonts][manual]].

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monospace-12"))
#+END_SRC


*** Font Awesome

[[https://fontawesome.com/][Font Awesome]] is popular icon font collection. A decent subset of its icons are
available for free. Its primary audience is front-end web developers but it has
also proven useful for Linux customisation.

Presently, I use Font Awesome with [[https://github.com/Alexays/Waybar][Waybar]], a status bar for wlroots-based
Wayland compositors. It is useful to be able to render these icons in Emacs when
editing Waybar's configuration file.

The following code prepends Font Awesome to the list of fallback
fonts. (Appending doesn't work.)

#+BEGIN_SRC emacs-lisp
  (set-fontset-font t '(#xf00 .#xfbff) (font-spec :family "Font Awesome 5 Brands Regular") nil 'prepend)
  (set-fontset-font t '(#xf00 .#xfbff) (font-spec :family "Font Awesome 5 Free Solid") nil 'prepend)
#+END_SRC


* Auto-saves & Backups

** Auto-saves

#+BEGIN_QUOTE
    By default, Emacs automatically saves your changes to a file
    intermittently. If anything should happen, you can recover a file with
    ~M-x recover-file~.

    ...

    By default, auto-save files are stored in the current directory with a
    file name on the form ~#file#~. If you don’t want to clutter up your
    file tree with Emacs' backup files, you can save them to a dedicated
    directory

    --- https://emacswiki.org/emacs/AutoSave
#+END_QUOTE

The following code sets the auto-save location to a single, out-of-the-way
directory.

#+BEGIN_SRC emacs-lisp
  (defvar mike-auto-save-location
    (expand-file-name "~/.emacs.d/auto-saves/")
    "Base directory for auto save files.")
  (make-directory mike-auto-save-location :parents)
  (setq auto-save-file-name-transforms
        `((".*" ,mike-auto-save-location t)))
#+END_SRC


** Backups

Taken from http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save. See
link for walkthrough.

Emacs can automatically back-up old versions of files when changes are saved.

#+BEGIN_QUOTE
    By default the backup file is made in the same directory as the original
    with a name like ~file~~. The way the backup works is that Emacs makes a copy
    of a file the first time you save it in an Emacs session. It only makes that
    one backup though, so this is not very useful if you keep your session
    running for a long time and want to recover an earlier version of a file.

    --- http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save
#+END_QUOTE

The following code:
- Moves autosaves to a single, out-of-the-way location
- Sets up backups after every save
- Allows multiple backups of the same file to co-exist
- Numbers backups
- Copies the first backup of each session to a separate directory
- Prevents backups of files over a certain size

These backups will pile up over time unless regularly purged. Currently I use a
cron-job to delete that are over 1 week old.

#+BEGIN_SRC emacs-lisp
  ;; custom backup location
  (defvar mike-backup-location (expand-file-name "~/.emacs.d/backups/")
    "Base directory for backup files.")
  (make-directory (expand-file-name "per-save/" mike-backup-location) :parents)
  (make-directory (expand-file-name "per-session/" mike-backup-location) :parents)


  ;; set default/per-save backup location
  (setq backup-directory-alist
        `((".*" . ,(expand-file-name "per-save/" mike-backup-location))))

  (setq
   backup-by-copying t        ; don't clobber symlinks
   kept-new-versions 1000     ; keep n latest versions
   kept-old-versions 0        ; don't bother with old versions
   delete-old-versions t      ; don't ask about deleting old versions
   version-control t          ; number backups
   vc-make-backup-files t)    ; backup version controlled files

  (defvar mike-backup-file-size-limit (* 5 1024 1024)
    "Maximum size of a file (in bytes) that should be copied at each savepoint.")

  (defun mike-backup-every-save ()
    "Backup files every time they are saved, as well as at the start of each session."

    ;; when at start of session
    (when (not buffer-backed-up)
      ;; settings for per-session backup
      (let ((backup-directory-alist
             `((".*" . ,(expand-file-name "per-session/" mike-backup-location))))
            (kept-new-versions 1000))

        ;; make a per-session backup
        (if (<= (buffer-size) mike-backup-file-size-limit)
            (progn
              (message "Made per-session backup of %s" (buffer-name))
              (backup-buffer))
          (warn
           "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
           (buffer-name)))))

    ;; always
    (let ((buffer-backed-up nil))
      (if (<= (buffer-size) mike-backup-file-size-limit)
          (progn
            (message "Made per-save backup of %s" (buffer-name))
            (backup-buffer))
        (warn
         "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
         (buffer-name)))))

  (add-hook 'before-save-hook 'mike-backup-every-save)
#+END_SRC


* Org

** Emphasis

Hide emphasis marker characters (such as '/'s for italics).

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC


** Indentation

Indent text according to outline structure. (Calls =org-indent-mode=.)

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC


** Structure Templates

Completions for Org blocks and other structures. As an example =q= is the
abbreviation for quote blocks. Typing =<q TAB= will print a empty quote block and
move the point inside it.

Several default completions are available. This code adds custom
completions. The question mark character denotes the cursor position.

Org version 9.2 will introduce new default behaviours for structure
templates. Configuration changes will be required.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")))
#+END_SRC


* Miscellaneous

** Mouse Autoselect Window

Automatically select any window the mouse passes over.

#+BEGIN_SRC emacs-lisp
  (setq mouse-autoselect-window t)
#+END_SRC


** Symbolic Links

When visiting a symlink to a version controlled file, do not follow the
symlink. (Of particular interest to me, don't follow this file to my dotfiles
directory.)

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC


* External Packages

** Prerequisites

Package's are a built-in feature since Emacs 24 (although they were available
earlier).

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC


** MELPA

https://melpa.org/

Add MELPA Stable to the package archives list. Use https if possible, elsewise
warn and use http. Taken from https://melpa.org/#/getting-started.

#+BEGIN_SRC emacs-lisp
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and
    ;; MELPA Stable as desired
    ;;(add-to-list 'package-archives
    ;;             (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    (add-to-list 'package-archives
                 (cons "melpa-stable"
                       (concat proto "://stable.melpa.org/packages/"))
                 t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives
                   (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
#+END_SRC


** Early Package Initialisation

By default packages are initialised (ie. loaded and activated) after ~init.el~ is
run. Manually initialising them early makes them available for use in ~init.el~.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC


** Use-package

https://github.com/jwiegley/use-package

=use-package= is a package configuration tool.

The following code checks that use-package is installed and downloads it if it
isn't. This is done entirely with Emacs' built-in package management tools. All
other packages should be setup with use-package instead.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+END_SRC

=Ensure= packages are installed by default. An ensured package will be downloaded
from the package archives if it is not already present.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC


** C#

https://github.com/josteink/csharp-mode

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :mode "\\.cs\\'"
    :commands csharp-mode)
#+END_SRC


*** Omnisharp

https://github.com/OmniSharp/omnisharp-emacs

Omnisharp is server for C# IDE features. =omnisharp-mode= enhances =csharp-mode=
with Omnisharp features.

This package requires Mono to be installed on the operating system.

Omnisharp has also recently implemented a LSP language server. =lsp-mode= includes
a client and installer for the language server, making this package
obsolete. Unfortunately, I have been unable to get this to work.

#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :hook (csharp-mode . omnisharp-mode)
    :config
    (omnisharp--install-server nil t)
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC


** Company

https://company-mode.github.io/

Auto-completion engine.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))
#+END_SRC


** Expand Region

https://github.com/magnars/expand-region.el

Expand the region by semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))     ; Use C-- C-= to shrink region
#+END_SRC


** Flycheck

https://www.flycheck.org/en/latest/

Programming syntax checker.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode t))
#+END_SRC


** JSON

https://elpa.gnu.org/packages/json-mode.html

Major mode for editing JSON files.

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'"
    :commands json-mode)
#+END_SRC


** Language Server Protocol (LSP)

https://microsoft.github.io/language-server-protocol/
https://github.com/emacs-lsp/lsp-mode

A protocol for communication between text editors and language
implementations. Provides a generic way to turn editors into IDEs.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (scala-mode . lsp)
    :commands lsp
    :config (setq lsp-enable-snippet nil))
#+END_SRC


*** Company LSP

https://github.com/tigersoldier/company-lsp

Company completion support for lsp-mode.

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :after company
    :config (push 'company-lsp company-backends))
#+END_SRC


*** LSP UI

https://github.com/emacs-lsp/lsp-ui

Advanced user interface features for lsp-mode.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :after flycheck
    :hook (lsp-mode . lsp-ui-mode)
    :config (setq lsp-prefer-flymake nil))
#+END_SRC



** Multiple Cursors

https://github.com/magnars/multiple-cursors.el

Multiple cursors package with both keyboard and mouse functionality.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init (unbind-key "C-<down-mouse-1>") ; mouse-buffer-menu
    :bind (("C-c m" . 'mc/edit-lines)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C->" . 'mc/mark-all-like-this)
           ("C-<mouse-1>" . 'mc/add-cursor-on-click)))
#+END_SRC


** Org Bullets

https://github.com/sabof/org-bullets

Use pretty Unicode bullet points for Org mode headings.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC


** Scala

https://www.scala-lang.org/
https://github.com/hvesalai/emacs-scala-mode

The Scala programming language.

#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :interpreter "scala"
    :mode ("\\.scala\\'" "\\.sbt\\'")
    :commands scala-mode)
#+END_SRC


*** SBT

https://www.scala-sbt.org/
https://github.com/hvesalai/emacs-sbt-mode

The Scala Build Tool.

#+BEGIN_SRC emacs-lisp
  (use-package sbt-mode
    :commands (sbt-start sbt-command)
    :config
    ;; WORKAROUND: allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+END_SRC


** Try

https://github.com/larstvei/Try

=Try= allows you to try download and use a package without permanently saving it
to your system. In other words it lets you try a package out before installing.

#+BEGIN_SRC emacs-lisp
  (use-package try
    :commands try)
#+END_SRC


** Which-key

https://github.com/justbur/emacs-which-key

Displays suggestions for unfinished key-bindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC


** YAML

https://yaml.org/
https://github.com/yoshiki/yaml-mode

YAML Ain't Markup Language

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yaml\\'" "\\.yml\\'")
    :commands yaml-mode)
#+END_SRC


* Key Bindings

** Bind-key

[[Use-package]] includes a package called =bind-key= to improve the keybinding
process.

It's syntax is slightly simpler. For example...
~(global-set-key (kbd "C-c n") 'global-display-line-numbers-mode)~
becomes...
~(bind-key "C-c n" 'global-display-line-numbers-mode)~

Keys bound with ~key-bind*~ cannot be overwritten by mode-specific keybindings.

And finally, ~describe-personal-keybindings~ lists all keybindings made with
=bind-key='s functions. This allows the user to keep track of all changes made to
Emacs' default keybindings.

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
#+END_SRC


** Indentation

Modify indentation character and width.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c t" 'mike-set-indentation)
#+END_SRC

Call ~tabify~ or ~untabify~, depending on ~indent-tabs-mode~.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c T" 'mike-indentify)
#+END_SRC


** Line Numbers

Toggle line numbers.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c n" 'global-display-line-numbers-mode)
#+END_SRC


** Revert Buffer

Borrowing from the Common User Access (CUA) conventions, bind =<f5>= to Emacs'
equivalent of a /refresh/ command.

#+BEGIN_SRC emacs-lisp
  (bind-key "<f5>" 'revert-buffer)
  (bind-key "M-<f5>" 'auto-revert-mode)
#+END_SRC


** Set Variable

Interactively set a *customisable* variable. See [[info:emacs#Examining][manual]] for more info.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c v" 'set-variable)
#+END_SRC


** Smarter C-a

B. Batsov's ~back-to-indentation~ / ~move-beginning-of-line~ combo.

#+BEGIN_SRC emacs-lisp
  ;; remap C-a to `smarter-move-beginning-of-line'
  (bind-key [remap move-beginning-of-line]
            'smarter-move-beginning-of-line)
#+END_SRC


** Suspend

By default =C-z= is bound to ~suspend-frame~. This emulates the Unix shell behaviour
of =C-z= issuing a =SIGTSTP= signal. This can be an annoying behaviour for GUI
applications, where the concept of a background job isn't applicable.

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z")
#+END_SRC


** Whitespace Mode

Toggle whitespace indicators.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c w" 'whitespace-mode)
#+END_SRC

