#+TITLE:	Emacs Configuration
#+AUTHOR:	Michael Dunleavy


* Preface

This is an Org file containing my Emacs configuration. Whenever this file is
saved in Emacs it will automatically collect all of this document's code
snippets into a new =init.el=. It does so this calling function ~org-babel-tangle~.

The code which configures this document and calls ~org-babel-tangle~ is located at
the end of this document.


* Header

Warn readers of =init.el= not to modify =init.el= directly.

#+BEGIN_SRC emacs-lisp :comments no
  ;;
  ;; DO NOT MODIFY THIS FILE DIRECTLY.
  ;; This file was automatically generated from init.org using babel.
  ;; Configuration should be done through init.org.
  ;; init.org will automatically generate new versions of this file,
  ;; overwriting any changes made outside of init.org.
  ;;

#+END_SRC


* Customize

~Customize~ is Emacs' system for GUI-based configuration. I do not use it directly
but some modes automatically edit it. This code moves Customize's state out of
=init.el= to a separate file.

#+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (if (file-exists-p custom-file)
        (load custom-file t)
      (write-region "" nil custom-file))
#+END_SRC


* User Interface

** Startup Screen

Do not open the =About GNU Emacs= splash screen on startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC


** Terminal Mouse

Enable mouse when running Emacs from xterm compatible terminal emulators.

#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC


** Tool-bar & Menu-bar

The tool-bar provides pictorial icons for editing tasks like save and undo. The
menu-bar provides textual drop-down menus for a wider range of tasks. Active
modes may add menu-bar menus. Both bars can be considered obtrusive. However,
the contextual menu-bar entries are useful in unfamiliar modes.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (if (not window-system)
      (menu-bar-mode -1))
#+END_SRC


** Scroll-bar

Disable the graphical scrollbar. I find it unnecessary, given the keyboard
navigation options and the row information on the mode line.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC


** Column Numbers

Add column numbers next to row numbers on the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC


** Frame Size

By default, Emacs automatically shrinks the frame so to align with row and
column boundaries (or at least it does on KDE). This looks bad when you maximise
a frame/window and there's a sliver of desktop visible. The following code
disables this behaviour.

#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
#+END_SRC

Additionally, for KDE systems, perform the following steps from
https://www.emacswiki.org/emacs/KdeMaximized:

#+BEGIN_QUOTE
    1. Right click on the Emacs image in the title bar.
    2. More Actions > Special Window Settings…
    3. Click on the Size & Position tab
    4. Select the checkbox for ‘Obey geometry restrictions’
    5. Choose ‘Force’ in the dropdown menu
    6. Select ‘No’ from the radio buttons to its right
    7. Click the ‘OK’ button at the bottom to save your settings.
#+END_QUOTE


** Yes or No Prompts

Replace yes/no prompts with y/n prompts.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Editing

** Delete Selection

Let typed text delete and replace any selected text. This is the default
behaviour in any other software with text editing.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC


** Fill Column

Preferred line width for commands like ~fill-paragraph~.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC


** Indentation & Whitespace

*** Tabs vs Spaces

Prefer spaces for ~prog-mode~, a superclass of all programming modes. Default to
tabs otherwise.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
			(lambda () (setq indent-tabs-mode nil)))
#+END_SRC

As an exception, use tabs in ~makefile-mode~. (Makefiles require tabs.)

#+BEGIN_SRC emacs-lisp
  (add-hook 'makefile-mode-hook
            (lambda () (setq indent-tabs-mode t)))
#+END_SRC


*** Indentation Width

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC


*** Indentation Behaviour

#+BEGIN_SRC emacs-lisp
  ;; TAB only indents when point is at the start of a line
  (setq-default tab-always-indent nil)

  ;; newlines don't indent the previous line
  (setq-default electric-indent-inhibit t)
#+END_SRC


*** Whitespace Deletion

#+BEGIN_SRC emacs-lisp
  ;; backspace deletes all whitespace at once
  ;; consider writing/stealing a backspace-to-tab-stop function
  (setq backward-delete-char-untabify-method 'hungry)
#+END_SRC


*** Trailing Whitespace

Highlight trailing whitespace. (Even invisible things can bother me.)  Trailing
whitespace can be purged with ~delete-trailing-whitespace~.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC


*** CC Mode

~cc-mode~ is a parent mode for C-like languages including C, Java & AWK. It
provides settings for indenting and formatting source code in its child
modes. Preset styles are available with ~c-set-style~.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "stroustrup")
#+END_SRC


** Pretty Symbols

Minor mode for drawing multi-character tokens as Unicode glyphs
(e.g. lambda -> λ).

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC


** Parentheses

Highlight pairs of matching parentheses when the point is on one of them.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC


** Spelling

Enable spell-checking by default for text modes. Requires a compatible
spell-checker to be installed on the operating system.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
	    (lambda () (flyspell-mode 1)))
#+END_SRC


* Auto-saves & Backups

** Auto-saves

#+BEGIN_QUOTE
	By default, Emacs automatically saves your changes to a file
	intermittently. If anything should happen, you can recover a file with
    ~M-x recover-file~.

	...

	By default, auto-save files are stored in the current directory with a file
	name on the form ~#file#~. If you don’t want to clutter up your file tree with
	Emacs' backup files, you can save them to a dedicated directory

	--- https://emacswiki.org/emacs/AutoSave
#+END_QUOTE

The following code sets the auto-save location to a single, out-of-the-way
directory.

#+BEGIN_SRC emacs-lisp
  (defvar mike-auto-save-location
	(expand-file-name "~/.emacs.d/auto-saves/")
	"Base directory for auto save files.")
  (setq auto-save-file-name-transforms
		`((".*" ,mike-auto-save-location t)))
#+END_SRC


** Backups

Taken from http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save . See
link for walkthrough.

Emacs can automatically back-up old versions of files when changes are saved.

#+BEGIN_QUOTE
	By default the backup file is made in the same directory as the original
	with a name like =file~=. The way the backup works is that Emacs makes a
	copy of a file the first time you save it in an Emacs session. It only makes
	that one backup though, so this is not very useful if you keep your session
	running for a long time and want to recover an earlier version of a file.

	--- http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save
#+END_QUOTE

The following code:
- Moves autosaves to a single, out-of-the-way location
- Sets up backups after every save
- Allows multiple backups of the same file to co-exist
- Numbers backups
- Copies the first backup of each session to a separate directory
- Prevents backups of files over a certain size

These backups will pile up over time unless regularly purged. Currently I use a
cron-job to delete backups over 1 week old.

#+BEGIN_SRC emacs-lisp
  ;; custom backup location
  ;; will contain sub-directories for per-session and per-save backups
  (defvar mike-backup-location (expand-file-name "~/.emacs.d/backups/")
	"Base directory for backup files.")

  ;; set default/per-save backup location
  (setq backup-directory-alist
	`((".*" . ,(expand-file-name "per-save/" mike-backup-location))))

  (setq
   backup-by-copying t        ; don't clobber symlinks
   kept-new-versions 1000     ; keep n latest versions
   kept-old-versions 0        ; don't bother with old versions
   delete-old-versions t      ; don't ask about deleting old versions
   version-control t          ; number backups
   vc-make-backup-files t)    ; backup version controlled files

  (defvar mike-backup-file-size-limit (* 5 1024 1024)
	"Maximum size of a file (in bytes) that should be copied at each savepoint.")

  (defun mike-backup-every-save ()
	"Backup files every time they are saved, as well as at the start of each session"

	;; when at start of session
	(when (not buffer-backed-up)
	  ;; settings for per-session backup
	  (let ((backup-directory-alist
			 `((".*" . ,(expand-file-name "per-session/" mike-backup-location))))
			(kept-new-versions 1000))

		;; make a per-session backup
		(if (<= (buffer-size) mike-backup-file-size-limit)
			(progn
			  (message "Made per-session backup of %s" (buffer-name))
			  (backup-buffer))
		  (warn
		   "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		   (buffer-name)))))

	;; always
	(let ((buffer-backed-up nil))
	  (if (<= (buffer-size) mike-backup-file-size-limit)
		  (progn
			(message "Made per-save backup of %s" (buffer-name))
			(backup-buffer))
		(warn
		 "Buffer %s too large to backup - increase value of mike-backup-file-size-limit"
		 (buffer-name)))))

  (add-hook 'before-save-hook 'mike-backup-every-save)
#+END_SRC


* Org

** Emphasis

Hide emphasis marker characters (such as '/'s for italics).

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC


** Indentation

Indent text according to outline structure. (Calls ~org-indent-mode~.)

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC


* Miscellaneous

** Shell Script

*** Default Shell

Set the default shell for =sh-mode= to the plain Bourne shell. Emacs' stock
behaviour is to set it to ~$SHELL~ or an equivalent. I prefer to use =zsh= as my
interactive shell but script in either =sh= or =bash= for portability.

#+BEGIN_SRC emacs-lisp
  (setq sh-shell-file "/bin/sh")
#+END_SRC


** Symbolic Links

Disable warning about following symbolic links to version controlled
directories. (Of particular interest to me, don't follow this file to my
dotfiles directory.)

#+BEGIN_SRC emacs-lisp
  ;; honestly, I don't know the full implications of this one
  ;; I just want the yes/no prompt gone
  (setq vc-follow-symlinks nil)
#+END_SRC


* External Packages

** Prerequisites

Package's are a built-in feature since Emacs 24 (although they were available
earlier).

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC


** MELPA

https://melpa.org/

Add MELPA to the package archives list. Require https. Taken from
https://melpa.org/#/getting-started.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; Comment/uncomment this line to enable MELPA Stable if desired.
  ;; See `package-archive-priorities` and `package-pinned-packages`.
  ;; Most users will not need or want to do this.
  ;;(add-to-list 'package-archives
  ;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+END_SRC

I have moved back to regular Melpa from Melpa Stable. Melpa Stable is a
lie. I've known this for some time. The sole criterion for a commit ending up in
Melpa Stable is whether it has been tagged with release number. Stability and
Zero-Day are equivalent as far as Melpa is concerned. Here's Gentoo's protocols
for package stabilisation for comparison:
[[https://wiki.gentoo.org/wiki/Stable_request]]. Regular Melpa is just as
unsupervised but at least it has the latest toys.


** Early Package Initialisation

By default packages are initialised (ie. loaded and activated) after =init.el= is
run. Manually initialising them early makes them available for use in =init.el=.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC


** Use-package

https://github.com/jwiegley/use-package

=use-package= is a package configuration tool.

The following code checks that use-package is installed and downloads it if it
isn't. This is done entirely with Emacs' built-in package management tools. All
other packages should be setup with use-package instead.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+END_SRC

=Ensured= packages are installed by default. An ensured package will be downloaded
from the package archives if it is not already present.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC


** AUCTeX

https://www.gnu.org/software/auctex/

Enhanced TeX mode. Using PDF Tools for viewing PDFs inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :after pdf-tools
    :custom (TeX-view-program-selection '((output-pdf "PDF Tools"))))
#+END_SRC


** Corfu

https://github.com/minad/corfu

Modular at-point completion system. I had used =Company= in the past instead. The
=popupinfo= extension adds documentation popups after a delay.

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t "Enable autocomplete")
    (corfu-auto-delay 0.1 "Delay before autocompleting")
    (corfu-popupinfo-delay '(1.6 0.8) "Delays before documentation popups")
    :config
    (global-corfu-mode 1)
    (corfu-popupinfo-mode 1))
#+END_SRC


** Eglot

https://joaotavora.github.io/eglot/

LSP (Language Server Protocol) client. Built-in to Emacs 29 and beyond.

Requires language servers to be installed on the system. I use the following
language servers:

| Language | Server   |
|----------+----------|
| C/C++    | [[https://clangd.llvm.org/][clangd]]   |
| LaTeX    | [[https://github.com/astoff/digestif][Digestif]] |

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :hook
    ((c-mode c++-mode TeX-mode tex-mode) . eglot-ensure)
    :custom
    (eglot-ignored-server-capabilities '(:documentOnTypeFormattingProvider)))
#+END_SRC


** Marginalia

https://github.com/minad/marginalia

Provides descriptions next to completions.

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :config (marginalia-mode))
#+END_SRC


** Markdown

https://jblevins.org/projects/markdown-mode/

Major mode for editing markdown. Used by Eglot and ElDoc to format
documentation.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :pin nongnu)
#+END_SRC


** PDF Tools

https://github.com/vedang/pdf-tools

Enhanced PDF viewer.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config (pdf-loader-install))
#+END_SRC


** Try

https://github.com/larstvei/Try

=Try= allows you to try download and use a package without permanently saving it
to your system. In other words it lets you try a package out before installing.

#+BEGIN_SRC emacs-lisp
  (use-package try
    :commands try)
#+END_SRC


** Vertico

https://github.com/minad/vertico

Modular vertical minibuffer completion system.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :config (vertico-mode))
#+END_SRC


** Which-key

https://github.com/justbur/emacs-which-key

Displays suggestions for unfinished key-bindings. Will be built-in to Emacs 30
and beyond.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC


* Key Bindings

** Bind-key

[[Use-package]] includes a package called =bind-key= to improve the keybinding
process.

It's syntax is slightly simpler. For example...
~(global-set-key (kbd "C-c n") 'global-display-line-numbers-mode)~
becomes...
~(bind-key "C-c n" 'global-display-line-numbers-mode)~

Keys bound with ~key-bind*~ cannot be overwritten by mode-specific keybindings.

And finally, ~describe-personal-keybindings~ lists all keybindings made with
=bind-key='s functions. This allows the user to keep track of all changes made to
Emacs' default keybindings.

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
#+END_SRC


** Build

Build the program including the current buffer.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c b" 'compixle)
  (bind-key "C-c B" 'kill-compilation)
#+END_SRC


** Cleanup Whitespace

Clean up a variety of whitespace problems.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c c" 'whitespace-cleanup)
#+END_SRC


** Diff

Diff buffer with its associated file, showing unsaved changes.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c d" 'diff-buffer-with-file)
#+END_SRC


** Line Numbers

Toggle line numbers.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c n" 'global-display-line-numbers-mode)
#+END_SRC


** Revert Buffer

Borrowing from the Common User Access (CUA) conventions, bind =<f5>= to Emacs'
equivalent of a /refresh/ command.

#+BEGIN_SRC emacs-lisp
  (bind-key "<f5>" 'revert-buffer)
  (bind-key "M-<f5>" 'auto-revert-mode)
#+END_SRC


** Set Variable

Interactively set a *customisable* variable. See [[info:emacs#Examining][manual]] for more info.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c v" 'set-variable)
#+END_SRC


** Suspend

By default =C-z= is bound to ~suspend-frame~. This emulates the Unix shell behaviour
of =C-z= issuing a =SIGTSTP= signal. This can be an annoying behaviour for GUI
applications, where the concept of a background job isn't applicable.

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z")
#+END_SRC


** Whitespace Mode

Toggle whitespace indicators.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c w" 'whitespace-mode)
#+END_SRC


* init.org

** Org-mode Properties

*** Tangling

Mark all source blocks for compilation.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args  :tangle yes
#+END_SRC
#+PROPERTY: header-args  :tangle yes


*** Comments

Put comments in output file to denote sections.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args+ :comments yes
#+END_SRC
#+PROPERTY: header-args+ :comments yes


*** Results

Prevent evaluation results from being appended to =init.org=.

#+BEGIN_SRC org :tangle no
  #+PROPERTY: header-args+ :results silent
#+END_SRC
#+PROPERTY: header-args+ :results silent


** Emacs File Local Variables

Compile =init.el= whenever =init.org= is saved in Emacs.

_The start of the local variables list should be no more than 3000 characters
from the end of the file..._ I had a very unpleasant time figuring that out.

#+BEGIN_SRC org :tangle no
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
  # End:
#+END_SRC

# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
